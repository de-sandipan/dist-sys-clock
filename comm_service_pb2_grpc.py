# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comm_service_pb2 as comm__service__pb2


class CommunicationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.queryBalance = channel.unary_unary(
                '/distributed_banking.Communications/queryBalance',
                request_serializer=comm__service__pb2.RequestMessage.SerializeToString,
                response_deserializer=comm__service__pb2.ResponseMessage.FromString,
                )
        self.depositMoney = channel.unary_unary(
                '/distributed_banking.Communications/depositMoney',
                request_serializer=comm__service__pb2.RequestMessage.SerializeToString,
                response_deserializer=comm__service__pb2.ResponseMessage.FromString,
                )
        self.withdrawMoney = channel.unary_unary(
                '/distributed_banking.Communications/withdrawMoney',
                request_serializer=comm__service__pb2.RequestMessage.SerializeToString,
                response_deserializer=comm__service__pb2.ResponseMessage.FromString,
                )
        self.propagateDeposit = channel.unary_unary(
                '/distributed_banking.Communications/propagateDeposit',
                request_serializer=comm__service__pb2.RequestMessage.SerializeToString,
                response_deserializer=comm__service__pb2.ResponseMessage.FromString,
                )
        self.porpagateWithdraw = channel.unary_unary(
                '/distributed_banking.Communications/porpagateWithdraw',
                request_serializer=comm__service__pb2.RequestMessage.SerializeToString,
                response_deserializer=comm__service__pb2.ResponseMessage.FromString,
                )


class CommunicationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def queryBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def depositMoney(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def withdrawMoney(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def propagateDeposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def porpagateWithdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'queryBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.queryBalance,
                    request_deserializer=comm__service__pb2.RequestMessage.FromString,
                    response_serializer=comm__service__pb2.ResponseMessage.SerializeToString,
            ),
            'depositMoney': grpc.unary_unary_rpc_method_handler(
                    servicer.depositMoney,
                    request_deserializer=comm__service__pb2.RequestMessage.FromString,
                    response_serializer=comm__service__pb2.ResponseMessage.SerializeToString,
            ),
            'withdrawMoney': grpc.unary_unary_rpc_method_handler(
                    servicer.withdrawMoney,
                    request_deserializer=comm__service__pb2.RequestMessage.FromString,
                    response_serializer=comm__service__pb2.ResponseMessage.SerializeToString,
            ),
            'propagateDeposit': grpc.unary_unary_rpc_method_handler(
                    servicer.propagateDeposit,
                    request_deserializer=comm__service__pb2.RequestMessage.FromString,
                    response_serializer=comm__service__pb2.ResponseMessage.SerializeToString,
            ),
            'porpagateWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.porpagateWithdraw,
                    request_deserializer=comm__service__pb2.RequestMessage.FromString,
                    response_serializer=comm__service__pb2.ResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_banking.Communications', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Communications(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def queryBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_banking.Communications/queryBalance',
            comm__service__pb2.RequestMessage.SerializeToString,
            comm__service__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def depositMoney(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_banking.Communications/depositMoney',
            comm__service__pb2.RequestMessage.SerializeToString,
            comm__service__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def withdrawMoney(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_banking.Communications/withdrawMoney',
            comm__service__pb2.RequestMessage.SerializeToString,
            comm__service__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def propagateDeposit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_banking.Communications/propagateDeposit',
            comm__service__pb2.RequestMessage.SerializeToString,
            comm__service__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def porpagateWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_banking.Communications/porpagateWithdraw',
            comm__service__pb2.RequestMessage.SerializeToString,
            comm__service__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
